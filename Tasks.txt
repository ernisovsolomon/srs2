1. Создайте класс BankAccount, который имеет атрибуты account_number (номер счета)
и balance (баланс). Реализуйте методы deposit(amount) для пополнения баланса
и withdraw(amount) для снятия денег со счета. Обратите внимание,
что сумма снятия не должна превышать текущий баланс.

2. Напишите класс Python, который имеет два метода get_String и print_String.
get_String принимает строку от пользователя и print_String печатает строку в верхнем регистре.

3. Создайте класс Employee (сотрудник) с приватным атрибутом salary (зарплата).
Реализуйте геттер и сеттер для атрибута salary, чтобы обеспечить контроль доступа к зарплате.
Геттер должен возвращать текущую зарплату, а сеттер должен проверять,
что новая зарплата является положительным числом. Если новая зарплата отрицательная,
метод сеттера должен вывести сообщение об ошибке. Создайте объект Employee и проверьте работу геттера и сеттера.


4. Напишите программу с классом Student, в котором есть три атрибута: name, groupNumber и age.
По умолчанию name = Ivan, age = 18, groupNumber = 10A. Необходимо создать пять методов:
getName, getAge, getGroupNumber, setNameAge, setGroupNumber. Метод getName нужен для получения данных
об имени конкретного студента, метод getAge нужен для получения данных о возрасте конкретного студента,
vетод setGroupNumberнужен для получения данных о номере группы конкретного студента.
Метод SetNameAge позволяет изменить данные атрибутов установленных по умолчанию, метод setGroupNumber
позволяет изменить номер группы установленный по умолчанию. В программе необходимо создать пять экземпляров класса Student,
установить им разные имена, возраст и номер группы.




5. Ниже представлены связанные задачи. Цель: создать симуляцию университета.
Обратите внимание на методы add_department и add_student. Подумайте,
как решить проблему перезаписи существующих в словаре данных.

1. Создайте класс University. В конструкторе создайте переменную экземпляра name,
куда записывается переданный аргумент university_name. 
2. Создайте переменную класса departments, у которого значение по умолчанию
-- пустой словарь
3. Создайте метод add_department, у которого параметр название факультета.
Метод должен записать в словарь departments название факультета,
а в качестве значения -- пустой список
4. Создайте класс Student, в конструкторе которого записывается firstname,
lastname студента. Т.е. при создании экземпляра должны быть переданы имя и фамилия студента.
5. Создайте метод add_student с параметрами название факультета и объект студент -- экземпляр класса Student.
Метод должен записать в словарь departments студента в соответствующий факультет.
6. Создайте экземпляр университета. Создайте нескольких студентов.
Добавьте факультеты. Добавьте студентов в факультеты.


Задача 1:
Напишите функцию, которая проверяет корректность переданного ей email-адреса в виде строки.
Будем полагать, что адрес верен, если он обязательно содержит символы '@' и '.',
а все остальные символы могут принимать значения: 'a-z', 'A-Z', '0-9' и '_'. Если email верен,
то функция выводит ДА, иначе - НЕТ.
После объявления функции прочитайте (с помощью функции input) строку с email-адресом и вызовите функцию с этим аргументом.

Задача 2:
Объявите функцию с двумя параметрами width и height (ширина и высота прямоугольника),
которая выводит сообщение (без кавычек):
"Периметр прямоугольника, равен x"
где x - вычисленный периметр прямоугольника. После объявления функции прочитайте
(с помощью функции input) два целых числа, записанных в одну строку через пробел,
и вызовите функцию с этими значениями.

Задача 3:
Объявите функцию, которая принимает список, находит максимальное, минимальное
и сумму значений этого списка и выводит результат в виде строки (без кавычек):
"Min = v_min, max = v_max, sum = v_sum"
где v_min, v_max, v_sum - вычисленные значения минимального, максимального и суммы значений списка.
